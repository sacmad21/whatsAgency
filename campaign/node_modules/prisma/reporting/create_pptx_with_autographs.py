from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.chart import XL_CHART_TYPE
from pptx.chart.data import CategoryChartData, XyChartData, BubbleChartData
import json

def create_pptx_with_autographs(slides_json: dict, file_path: str):
    prs = Presentation()

    for idx, slide_data in enumerate(slides_json.get('slides', [])):
        slide_layout = prs.slide_layouts[0] if idx == 0 else prs.slide_layouts[1]

        slide = prs.slides.add_slide(slide_layout)
        title = slide.shapes.title
        body = slide.placeholders[1]

        title.text = slide_data.get('title', "No Title")

        text_frame = body.text_frame
        text_frame.clear()

        if slide_data.get('subtitle'):
            p = text_frame.add_paragraph()
            p.text = slide_data['subtitle']
            p.font.bold = True
            p.font.size = Pt(20)

        for bullet in slide_data.get('bulletPoints', []):
            p = text_frame.add_paragraph()
            p.text = bullet
            p.font.size = Pt(16)
            p.level = 0

        if slide_data.get('graphData'):
            add_chart(slide, slide_data)

    prs.save(file_path)
    print(f"PPTX with graphs saved at {file_path}")

def add_chart(slide, slide_data):
    left = Inches(4)
    top = Inches(2.5)
    width = Inches(5)
    height = Inches(3)

    graph_data = slide_data['graphData']
    categories = graph_data['categories']
    values = graph_data['values']

    chart_data = CategoryChartData()
    chart_data.categories = categories
    chart_data.add_series('Series 1', values)

    chart_type = detect_chart_type(slide_data['graphSuggestion'])

    graphic_frame = slide.shapes.add_chart(
        chart_type, left, top, width, height, chart_data
    ).chart

def detect_chart_type(graph_suggestion):
    if "Funnel" in graph_suggestion:
        return XL_CHART_TYPE.COLUMN_CLUSTERED
    elif "Uplift" in graph_suggestion:
        return XL_CHART_TYPE.COLUMN_CLUSTERED
    elif "Trend" in graph_suggestion:
        return XL_CHART_TYPE.LINE_MARKERS
    elif "Revenue" in graph_suggestion:
        return XL_CHART_TYPE.PIE
    else:
        return XL_CHART_TYPE.COLUMN_CLUSTERED



# Load your previously generated report
file = "campaign/reporting/internal_campaign_report_charts.json"
f2 = "internal_campaign_report.json"
with open(file, "r") as f:

    report_data = json.load(f)

# Assume report_data["slides"] is the slides structure we simulated
create_pptx_with_autographs(report_data, "campaign/reporting/UrbanNest_Campaign_Report2.pptx")
