from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.shapes import MSO_SHAPE
from pptx.dml.color import RGBColor
from pptx.enum.chart import XL_CHART_TYPE
from pptx.chart.data import CategoryChartData
import json

def create_thematic_pptx(slides_json: dict, file_path: str):
    prs = Presentation()

    for idx, slide_data in enumerate(slides_json.get('slides', [])):
        slide = prs.slides.add_slide(prs.slide_layouts[6])  # Blank Layout

        # Title Bar
        draw_title_bar(slide, slide_data.get('title', "No Title"))

        # Left Column (Bullet Points)
        draw_left_column(slide, slide_data.get('leftColumn', []))

        # Right Column (Detailed Text or Chart)
        draw_right_block(slide, slide_data.get('rightBlock'))

    prs.save(file_path)
    print(f"âœ… Professional PPTX generated successfully at: {file_path}")

def draw_title_bar(slide, title_text):
    left, top, width, height = Inches(0), Inches(0), Inches(10), Inches(1)
    title_shape = slide.shapes.add_shape(MSO_SHAPE.RECTANGLE, left, top, width, height)
    title_shape.fill.solid()
    title_shape.fill.fore_color.rgb = RGBColor(0, 51, 102)  # Dark Blue
    title_shape.line.fill.background()
    title_shape.text = title_text
    tf = title_shape.text_frame
    p = tf.paragraphs[0]
    p.font.size = Pt(32)
    p.font.bold = True
    p.font.color.rgb = RGBColor(255, 255, 255)  # White
    p.alignment = 1  # Center align

def draw_left_column(slide, bullet_points):
    left, top, width, height = Inches(0.3), Inches(1.2), Inches(4.5), Inches(5.5)
    left_shape = slide.shapes.add_shape(MSO_SHAPE.RECTANGLE, left, top, width, height)
    left_shape.fill.solid()
    left_shape.fill.fore_color.rgb = RGBColor(245, 245, 245)  # Light Grey
    left_shape.line.fill.background()

    tf = left_shape.text_frame
    tf.clear()

    for bullet in bullet_points:
        p = tf.add_paragraph()
        p.text = bullet
        p.font.size = Pt(20)
        p.level = 0

def draw_right_block(slide, right_block):
    left, top, width, height = Inches(5.2), Inches(1.2), Inches(4.5), Inches(5.5)
    
    if right_block is None:
        # Add empty block to maintain layout
        block = slide.shapes.add_shape(MSO_SHAPE.RECTANGLE, left, top, width, height)
        block.fill.solid()
        block.fill.fore_color.rgb = RGBColor(232, 241, 250)  # Light Blue
        block.line.fill.background()
        return

    block_type = right_block.get("type", "text")

    if block_type == "text":
        # Text paragraph on right
        block = slide.shapes.add_shape(MSO_SHAPE.RECTANGLE, left, top, width, height)
        block.fill.solid()
        block.fill.fore_color.rgb = RGBColor(232, 241, 250)  # Light Blue
        block.line.fill.background()
        tf = block.text_frame
        tf.clear()

        p = tf.add_paragraph()
        p.text = right_block.get('paragraph', "")
        p.font.size = Pt(18)
        p.level = 0

    elif block_type == "chart":
        # Insert chart
        chart_data = CategoryChartData()
        chart_data.categories = right_block['categories']
        chart_data.add_series('Series 1', right_block['values'])

        chart_type = detect_chart_type(right_block['graphSuggestion'])

        slide.shapes.add_chart(
            chart_type, left, top, width, height, chart_data
        ).chart

def detect_chart_type(graph_suggestion):
    if graph_suggestion:
        graph_suggestion = graph_suggestion.lower()
    else:
        graph_suggestion = ""

    if "funnel" in graph_suggestion:
        return XL_CHART_TYPE.COLUMN_CLUSTERED
    elif "uplift" in graph_suggestion:
        return XL_CHART_TYPE.COLUMN_CLUSTERED
    elif "trend" in graph_suggestion:
        return XL_CHART_TYPE.LINE_MARKERS
    elif "pie" in graph_suggestion:
        return XL_CHART_TYPE.PIE
    else:
        return XL_CHART_TYPE.COLUMN_CLUSTERED



# Load your previously generated report
file = "campaign/reporting/internal_campaign_report_themed.json"
with open(file, "r") as f:

    report_data = json.load(f)

# Assume report_data["slides"] is the slides structure we simulated
create_thematic_pptx(report_data, "campaign/reporting/UrbanNest_themed_report.pptx")
