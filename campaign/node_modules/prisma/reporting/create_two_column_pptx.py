from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.chart import XL_CHART_TYPE
from pptx.chart.data import CategoryChartData
import json

def create_two_column_pptx(slides_json: dict, file_path: str):
    prs = Presentation()

    for idx, slide_data in enumerate(slides_json.get('slides', [])):
        slide_layout = prs.slide_layouts[5]  # Title and Content layout
        slide = prs.slides.add_slide(slide_layout)

        # Title
        title = slide.shapes.title
        title.text = slide_data.get('title', "No Title")
        title.text_frame.paragraphs[0].font.size = Pt(32)

        # Left Column - Bullet Points
        left = Inches(0.5)
        top = Inches(1.8)
        width = Inches(4)
        height = Inches(4)

        textbox = slide.shapes.add_textbox(left, top, width, height)
        tf = textbox.text_frame
        tf.clear()

        for bullet in slide_data.get('leftColumn', []):
            p = tf.add_paragraph()
            p.text = bullet
            p.font.size = Pt(20)
            p.level = 0

        # Right Column - Graph (if available)
        if "rightGraph" in slide_data:
            graph_info = slide_data["rightGraph"]
            add_right_graph(slide, graph_info)

    prs.save(file_path)
    print(f"ðŸ“ˆ Final Professional PPTX generated at {file_path}")

def add_right_graph(slide, graph_info):
    left = Inches(5.5)
    top = Inches(2)
    width = Inches(4)
    height = Inches(3)

    chart_data = CategoryChartData()
    chart_data.categories = graph_info['categories']
    chart_data.add_series('Series 1', graph_info['values'])

    chart_type = detect_chart_type(graph_info['graphSuggestion'])

    graphic_frame = slide.shapes.add_chart(
        chart_type, left, top, width, height, chart_data
    ).chart

def detect_chart_type(graph_suggestion):
    if "Funnel" in graph_suggestion:
        return XL_CHART_TYPE.COLUMN_CLUSTERED
    elif "Uplift" in graph_suggestion:
        return XL_CHART_TYPE.COLUMN_CLUSTERED
    elif "Trend" in graph_suggestion:
        return XL_CHART_TYPE.LINE_MARKERS
    elif "Pie" in graph_suggestion:
        return XL_CHART_TYPE.PIE
    else:
        return XL_CHART_TYPE.COLUMN_CLUSTERED


# Load your previously generated report
file = "campaign/reporting/internal_campaign_report_2columns.json"
with open(file, "r") as f:

    report_data = json.load(f)

# Assume report_data["slides"] is the slides structure we simulated
create_two_column_pptx(report_data, "campaign/reporting/Col2_Campaign_Report2.pptx")
