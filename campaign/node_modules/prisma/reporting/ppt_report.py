from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.shapes import MSO_SHAPE
import json

def create_pptx_from_internal_report(slides_json: dict, file_path: str):
    prs = Presentation()

    for idx, slide_data in enumerate(slides_json.get('slides', [])):
        slide_layout = prs.slide_layouts[0] if idx == 0 else prs.slide_layouts[1]

        slide = prs.slides.add_slide(slide_layout)
        title = slide.shapes.title
        body = slide.placeholders[1]

        title.text = slide_data.get('title', "No Title")

        text_frame = body.text_frame
        text_frame.clear()

        # Add Subtitle if exists
        if 'subtitle' in slide_data and slide_data['subtitle']:
            p = text_frame.add_paragraph()
            p.text = slide_data['subtitle']
            p.font.bold = True
            p.font.size = Pt(20)

        # Add Bullet Points
        for bullet in slide_data.get('bulletPoints', []):
            p = text_frame.add_paragraph()
            p.text = bullet
            p.font.size = Pt(16)
            p.level = 0

        # Add Graph Placeholder if needed
        if slide_data.get('graphSuggestion'):
            add_graph_placeholder(slide, slide_data['graphSuggestion'])

    prs.save(file_path)
    print(f"PPTX generated at: {file_path}")

def add_graph_placeholder(slide, suggestion_text):
    left = Inches(4)
    top = Inches(2.5)
    width = Inches(4)
    height = Inches(2)

    shape = slide.shapes.add_shape(
        MSO_SHAPE.RECTANGLE, left, top, width, height
    )
    shape.text = f"Graph: {suggestion_text}"
    shape.text_frame.paragraphs[0].font.size = Pt(14)
    shape.text_frame.paragraphs[0].font.bold = True



# Load your previously generated report
file = "campaign/reporting/internal_campaign_report.json"
f2 = "internal_campaign_report.json"
with open(file, "r") as f:

    report_data = json.load(f)

# Assume report_data["slides"] is the slides structure we simulated
create_pptx_from_internal_report(report_data, "UrbanNest_Campaign_Report.pptx")
