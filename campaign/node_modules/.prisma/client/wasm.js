
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.17.0
 * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
 */
Prisma.prismaVersion = {
  client: "5.17.0",
  engine: "393aa359c9ad4a4bb28630fb5613f9c281cde053"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CompetitorStrategyScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  competitor: 'competitor',
  promotionType: 'promotionType',
  channels: 'channels',
  strength: 'strength',
  weakness: 'weakness',
  createdAt: 'createdAt'
};

exports.Prisma.EnterpriseContextScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  companyName: 'companyName',
  domain: 'domain',
  businessModel: 'businessModel',
  background: 'background',
  currentPain: 'currentPain',
  goals: 'goals',
  createdAt: 'createdAt'
};

exports.Prisma.AudienceSegmentScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  label: 'label',
  demographics: 'demographics',
  behavior: 'behavior',
  painPoints: 'painPoints',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CampaignObjectiveScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  goal: 'goal'
};

exports.Prisma.TargetAudienceSegmentScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  segment: 'segment'
};

exports.Prisma.PromotionTypeScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  type: 'type'
};

exports.Prisma.CampaignOfferScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  description: 'description',
  offerLimit: 'offerLimit',
  offerType: 'offerType',
  successCriteria: 'successCriteria',
  backupOffer: 'backupOffer',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignBudgetScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  mediaSpend: 'mediaSpend',
  creativeSpend: 'creativeSpend',
  incentiveSpend: 'incentiveSpend',
  logisticsSpend: 'logisticsSpend',
  totalBudget: 'totalBudget',
  costPerCustomer: 'costPerCustomer',
  expectedROI: 'expectedROI',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.ChannelPlanScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  channels: 'channels',
  primary: 'primary',
  primaryReason: 'primaryReason',
  messageStyles: 'messageStyles',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignTimelineScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  milestoneName: 'milestoneName',
  milestoneType: 'milestoneType',
  plannedDate: 'plannedDate',
  createdAt: 'createdAt'
};

exports.Prisma.ComplianceChecklistScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  item: 'item',
  severity: 'severity',
  responsibleDepartment: 'responsibleDepartment',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.PromotionalMessageScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  platform: 'platform',
  tone: 'tone',
  message: 'message',
  callToAction: 'callToAction',
  createdAt: 'createdAt'
};

exports.Prisma.CreativeDesignPlanScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  platform: 'platform',
  creativeTitle: 'creativeTitle',
  headline: 'headline',
  visualTheme: 'visualTheme',
  cta: 'cta',
  mobileOptimizationTip: 'mobileOptimizationTip',
  createdAt: 'createdAt'
};

exports.Prisma.CreativeAssetScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  type: 'type',
  assetUrl: 'assetUrl',
  createdAt: 'createdAt'
};

exports.Prisma.MediaAssetScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  type: 'type',
  title: 'title',
  concept: 'concept',
  engagementTip: 'engagementTip',
  mobileOptimizationTip: 'mobileOptimizationTip',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.ContentCalendarScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  contentType: 'contentType',
  platform: 'platform',
  contentRef: 'contentRef',
  scheduledFor: 'scheduledFor',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.TeaserContentScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  message: 'message',
  platform: 'platform',
  teaserTheme: 'teaserTheme',
  tone: 'tone',
  scheduledAt: 'scheduledAt',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerSegmentListScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  segment: 'segment',
  criteria: 'criteria',
  count: 'count',
  createdAt: 'createdAt'
};

exports.Prisma.InfluencerPlanScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  influencerName: 'influencerName',
  platform: 'platform',
  postType: 'postType',
  expectedImpact: 'expectedImpact',
  scheduledAt: 'scheduledAt',
  createdAt: 'createdAt'
};

exports.Prisma.OperationalChecklistScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  system: 'system',
  checklistItem: 'checklistItem',
  expectedOutcome: 'expectedOutcome',
  responsibility: 'responsibility',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignActivationScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  platform: 'platform',
  assetType: 'assetType',
  assetReference: 'assetReference',
  activationTime: 'activationTime',
  status: 'status',
  activationResult: 'activationResult',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerEngagementLogScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  userId: 'userId',
  sessionId: 'sessionId',
  interactionType: 'interactionType',
  message: 'message',
  resolutionStatus: 'resolutionStatus',
  responseTime: 'responseTime',
  csatScore: 'csatScore',
  createdAt: 'createdAt'
};

exports.Prisma.PerformanceReportScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  date: 'date',
  impressions: 'impressions',
  clicks: 'clicks',
  qrScans: 'qrScans',
  conversions: 'conversions',
  chatbotSessions: 'chatbotSessions',
  escalations: 'escalations',
  escalationRate: 'escalationRate',
  avgBotResponseTime: 'avgBotResponseTime',
  avgHumanResponseTime: 'avgHumanResponseTime',
  csatScoreAverage: 'csatScoreAverage',
  anomalies: 'anomalies',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerFeedbackScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  userId: 'userId',
  interactionId: 'interactionId',
  feedbackText: 'feedbackText',
  rating: 'rating',
  collectedVia: 'collectedVia',
  createdAt: 'createdAt'
};

exports.Prisma.ThankYouMessageScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  userId: 'userId',
  messageBody: 'messageBody',
  sentVia: 'sentVia',
  segment: 'segment',
  sentAt: 'sentAt'
};

exports.Prisma.RetargetingPlanScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  audienceSegment: 'audienceSegment',
  retargetingChannel: 'retargetingChannel',
  offerMessage: 'offerMessage',
  scheduledAt: 'scheduledAt',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignExtensionPlanScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  reason: 'reason',
  extendedTo: 'extendedTo',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignAnalysisReportScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  totalImpressions: 'totalImpressions',
  totalClicks: 'totalClicks',
  totalQrScans: 'totalQrScans',
  totalConversions: 'totalConversions',
  conversionRate: 'conversionRate',
  revenueGenerated: 'revenueGenerated',
  campaignSpend: 'campaignSpend',
  roi: 'roi',
  engagementRate: 'engagementRate',
  csatAverage: 'csatAverage',
  escalationRate: 'escalationRate',
  learningsSummary: 'learningsSummary',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignLearningsScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  whatWorked: 'whatWorked',
  whatDidNotWork: 'whatDidNotWork',
  bestPractices: 'bestPractices',
  improvementAreas: 'improvementAreas',
  createdAt: 'createdAt'
};

exports.Prisma.InternalCampaignReportScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  reportTitle: 'reportTitle',
  executiveSummary: 'executiveSummary',
  kpiHighlights: 'kpiHighlights',
  learningHighlights: 'learningHighlights',
  improvementAreas: 'improvementAreas',
  graphsReference: 'graphsReference',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  CompetitorStrategy: 'CompetitorStrategy',
  EnterpriseContext: 'EnterpriseContext',
  AudienceSegment: 'AudienceSegment',
  Campaign: 'Campaign',
  CampaignObjective: 'CampaignObjective',
  TargetAudienceSegment: 'TargetAudienceSegment',
  PromotionType: 'PromotionType',
  CampaignOffer: 'CampaignOffer',
  CampaignBudget: 'CampaignBudget',
  ChannelPlan: 'ChannelPlan',
  CampaignTimeline: 'CampaignTimeline',
  ComplianceChecklist: 'ComplianceChecklist',
  PromotionalMessage: 'PromotionalMessage',
  CreativeDesignPlan: 'CreativeDesignPlan',
  CreativeAsset: 'CreativeAsset',
  MediaAsset: 'MediaAsset',
  ContentCalendar: 'ContentCalendar',
  TeaserContent: 'TeaserContent',
  CustomerSegmentList: 'CustomerSegmentList',
  InfluencerPlan: 'InfluencerPlan',
  OperationalChecklist: 'OperationalChecklist',
  CampaignActivation: 'CampaignActivation',
  CustomerEngagementLog: 'CustomerEngagementLog',
  PerformanceReport: 'PerformanceReport',
  CustomerFeedback: 'CustomerFeedback',
  ThankYouMessage: 'ThankYouMessage',
  RetargetingPlan: 'RetargetingPlan',
  CampaignExtensionPlan: 'CampaignExtensionPlan',
  CampaignAnalysisReport: 'CampaignAnalysisReport',
  CampaignLearnings: 'CampaignLearnings',
  InternalCampaignReport: 'InternalCampaignReport'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
