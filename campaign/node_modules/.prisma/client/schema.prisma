generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql" or "sqlite" based on your setup
  url      = env("DATABASE_URL")
}

model CompetitorStrategy {
  id            String   @id @default(uuid())
  campaign      Campaign @relation(fields: [campaignId], references: [id])
  campaignId    String
  competitor    String
  promotionType String // e.g., "BOGO", "Flat Discount", "Flash Sale"
  channels      String // e.g., "WhatsApp, Instagram, Website"
  strength      String
  weakness      String
  createdAt     DateTime @default(now())
}

model EnterpriseContext {
  id            String   @id @default(uuid())
  campaign      Campaign @relation(fields: [campaignId], references: [id])
  campaignId    String
  companyName   String
  domain        String
  businessModel String
  background    String // Rich narrative about the company’s story
  currentPain   String // Specific challenge faced (e.g. “low conversion in tier-2 cities”)
  goals         String // Optional internal strategic goals if available
  createdAt     DateTime @default(now())
}

model AudienceSegment {
  id           String   @id @default(uuid())
  campaign     Campaign @relation(fields: [campaignId], references: [id])
  campaignId   String
  label        String // e.g. "Tier-2 Urban Millennials"
  demographics String
  behavior     String // shopping pattern, channel preference
  painPoints   String
  createdAt    DateTime @default(now())
}

model Campaign {
  id          String    @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // ✅ Add missing back-relations here
  enterpriseContexts EnterpriseContext[]
  audienceSegments   AudienceSegment[]
  creativePlans      CreativeDesignPlan[]

  // Relations
  objectives      CampaignObjective[]
  audiences       TargetAudienceSegment[]
  competitors     CompetitorStrategy[]
  promotions      PromotionType[]
  offers          CampaignOffer[]
  budgets         CampaignBudget[]
  channels        ChannelPlan[]
  timelines       CampaignTimeline[]
  compliances     ComplianceChecklist[]
  creatives       CreativeAsset[]
  messages        PromotionalMessage[]
  mediaAssets     MediaAsset[]
  calendars       ContentCalendar[]
  teasers         TeaserContent[]
  customers       CustomerSegmentList[]
  influencers     InfluencerPlan[]
  checklists      OperationalChecklist[]
  activations     CampaignActivation[]
  engagements     CustomerEngagementLog[]
  reports         PerformanceReport[]
  feedbacks       CustomerFeedback[]
  thanks          ThankYouMessage[]
  retargetings    RetargetingPlan[]
  extensions      CampaignExtensionPlan[]
  analysisReports CampaignAnalysisReport[]
  learnings       CampaignLearnings[]
  internalReports InternalCampaignReport[]
}

model CampaignObjective {
  id         String   @id @default(uuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String
  goal       String
}

model TargetAudienceSegment {
  id         String   @id @default(uuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String
  segment    String
}

model PromotionType {
  id         String   @id @default(uuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String
  type       String
}

model CampaignOffer {
  id              String   @id @default(uuid())
  campaign        Campaign @relation(fields: [campaignId], references: [id])
  campaignId      String
  description     String
  offerLimit      Int? // e.g., "First 500 customers"
  offerType       String? // e.g., Discount, BOGO, Coupon
  successCriteria String? // e.g., "Achieve 5,000 redemptions in 14 days"
  backupOffer     String? // Optional secondary offer fallback
  createdAt       DateTime @default(now())
}

model CampaignBudget {
  id              String   @id @default(uuid())
  campaign        Campaign @relation(fields: [campaignId], references: [id])
  campaignId      String
  mediaSpend      Float
  creativeSpend   Float
  incentiveSpend  Float
  logisticsSpend  Float
  totalBudget     Float
  costPerCustomer Float // New: Cost efficiency metric
  expectedROI     Float? // New: Return on investment if predicted
  notes           String? // New: Optional notes from financial planning
  createdAt       DateTime @default(now())
}

model ChannelPlan {
  id            String   @id @default(uuid())
  campaign      Campaign @relation(fields: [campaignId], references: [id])
  campaignId    String
  channels      String[] // ["WhatsApp", "Instagram", "Facebook"]
  primary       String // "WhatsApp"
  primaryReason String // Reason why this is primary (new field)
  messageStyles String[] // ["Broadcast", "Story Ads", "DM Campaign"]
  createdAt     DateTime @default(now())
}

model CampaignTimeline {
  id            String   @id @default(uuid())
  campaign      Campaign @relation(fields: [campaignId], references: [id])
  campaignId    String
  milestoneName String
  milestoneType String // e.g., "Offer Finalization", "Platform Setup", "Go-Live", etc.
  plannedDate   DateTime
  createdAt     DateTime @default(now())
}

model ComplianceChecklist {
  id                    String   @id @default(uuid())
  campaign              Campaign @relation(fields: [campaignId], references: [id])
  campaignId            String
  item                  String // e.g., "Terms & Conditions drafted"
  severity              String // e.g., Critical / Major / Minor
  responsibleDepartment String
  status                String   @default("Pending") // Pending / Completed
  createdAt             DateTime @default(now())
}

model PromotionalMessage {
  id           String   @id @default(uuid())
  campaign     Campaign @relation(fields: [campaignId], references: [id])
  campaignId   String
  platform     String // WhatsApp, Instagram, Facebook
  tone         String // Friendly, Aspirational, Urgent
  message      String
  callToAction String
  createdAt    DateTime @default(now())
}

model CreativeDesignPlan {
  id                    String   @id @default(uuid())
  campaign              Campaign @relation(fields: [campaignId], references: [id])
  campaignId            String
  platform              String // WhatsApp, Instagram, Facebook
  creativeTitle         String
  headline              String
  visualTheme           String
  cta                   String
  mobileOptimizationTip String
  createdAt             DateTime @default(now())
}

model CreativeAsset {
  id         String   @id @default(uuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String
  type       String // e.g., "WhatsApp Flyer", "Instagram Story Ad", "Facebook Carousel Image"
  assetUrl   String // URL to where the creative is stored
  createdAt  DateTime @default(now())
}

model MediaAsset {
  id                    String   @id @default(uuid())
  campaign              Campaign @relation(fields: [campaignId], references: [id])
  campaignId            String
  type                  String // e.g., Infographic, GIF, Animated Video
  title                 String // Clear title e.g., "Scan Your QR - Animation"
  concept               String // Concept idea
  engagementTip         String // Special tip to boost engagement
  mobileOptimizationTip String
  url                   String? // Uploaded asset URL later
  createdAt             DateTime @default(now())
}

model ContentCalendar {
  id           String   @id @default(uuid())
  campaign     Campaign @relation(fields: [campaignId], references: [id])
  campaignId   String
  contentType  String // Message, Creative, Media
  platform     String // WhatsApp, Instagram, Facebook
  contentRef   String // reference text or URL
  scheduledFor DateTime
  notes        String?
  createdAt    DateTime @default(now())
}

model TeaserContent {
  id          String   @id @default(uuid())
  campaign    Campaign @relation(fields: [campaignId], references: [id])
  campaignId  String
  message     String
  platform    String // WhatsApp, Instagram, Facebook, Email
  teaserTheme String? // Mystery / Countdown / Limited Offer / Influencer Hint
  tone        String
  scheduledAt DateTime
  createdAt   DateTime @default(now())
}

model CustomerSegmentList {
  id         String   @id @default(uuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String
  segment    String // Name of segment like "High-Intent Buyers"
  criteria   String // Description of how/why segment was created
  count      Int
  createdAt  DateTime @default(now())
}

model InfluencerPlan {
  id             String   @id @default(uuid())
  campaign       Campaign @relation(fields: [campaignId], references: [id])
  campaignId     String
  influencerName String
  platform       String // Instagram, YouTube, WhatsApp Community
  postType       String // Story, Reel, Group Post
  expectedImpact String? // New field: What result is expected (eg: increase curiosity, boost signups)
  scheduledAt    DateTime
  createdAt      DateTime @default(now())
}

model OperationalChecklist {
  id              String   @id @default(uuid())
  campaign        Campaign @relation(fields: [campaignId], references: [id])
  campaignId      String
  system          String // Example: WhatsApp QR Code Flow
  checklistItem   String // Example: Verify QR code scanning and coupon redemption
  expectedOutcome String // Example: QR scan leads to successful coupon application
  responsibility  String // Example: Tech Team
  status          String // Pending, Completed, Issue Found
  createdAt       DateTime @default(now())
}

model CampaignActivation {
  id               String   @id @default(uuid())
  campaign         Campaign @relation(fields: [campaignId], references: [id])
  campaignId       String
  platform         String // WhatsApp, Instagram, Facebook, Email, SMS
  assetType        String // PromotionalMessage, CreativeAsset, MediaAsset
  assetReference   String
  activationTime   DateTime
  status           String // Scheduled, Launched, Failed
  activationResult String // Success log or error if failed
  createdAt        DateTime @default(now())
}

model CustomerEngagementLog {
  id               String   @id @default(uuid())
  campaign         Campaign @relation(fields: [campaignId], references: [id])
  campaignId       String
  userId           String // Customer ID or Phone
  sessionId        String // Unique chat session identifier
  interactionType  String // Bot Response, Human Escalation, FAQ Resolution
  message          String
  resolutionStatus String // Resolved, Pending, Escalated
  responseTime     Int // Time taken in seconds
  csatScore        Int? // Optional satisfaction rating (1 to 5)
  createdAt        DateTime @default(now())
}

model PerformanceReport {
  id                   String   @id @default(uuid())
  campaign             Campaign @relation(fields: [campaignId], references: [id])
  campaignId           String
  date                 DateTime
  impressions          Int
  clicks               Int
  qrScans              Int
  conversions          Int
  chatbotSessions      Int
  escalations          Int
  escalationRate       Float
  avgBotResponseTime   Int
  avgHumanResponseTime Int
  csatScoreAverage     Float
  anomalies            String?
  createdAt            DateTime @default(now())
}

model CustomerFeedback {
  id            String   @id @default(uuid())
  campaign      Campaign @relation(fields: [campaignId], references: [id])
  campaignId    String
  userId        String // Customer's phone number or ID
  interactionId String? // From support/chat session if available
  feedbackText  String
  rating        Int // 1 to 5 scale
  collectedVia  String // WhatsApp, Email, Web
  createdAt     DateTime @default(now())
}

model ThankYouMessage {
  id          String   @id @default(uuid())
  campaign    Campaign @relation(fields: [campaignId], references: [id])
  campaignId  String
  userId      String // Customer phone number or ID
  messageBody String
  sentVia     String // WhatsApp, Email
  segment     String // Buyer, Non-converter
  sentAt      DateTime @default(now())
}

model RetargetingPlan {
  id                 String   @id @default(uuid())
  campaign           Campaign @relation(fields: [campaignId], references: [id])
  campaignId         String
  audienceSegment    String // Engaged Non-Converters, Partial Checkouts, Abandoned Carts
  retargetingChannel String // WhatsApp, Facebook Ads, Instagram Ads, Email
  offerMessage       String
  scheduledAt        DateTime
  createdAt          DateTime @default(now())
}

model CampaignExtensionPlan {
  id         String   @id @default(uuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String
  reason     String
  extendedTo DateTime
  details    String
  createdAt  DateTime @default(now())
}

model CampaignAnalysisReport {
  id               String   @id @default(uuid())
  campaign         Campaign @relation(fields: [campaignId], references: [id])
  campaignId       String
  totalImpressions Int
  totalClicks      Int
  totalQrScans     Int
  totalConversions Int
  conversionRate   Float
  revenueGenerated Float
  campaignSpend    Float
  roi              Float
  engagementRate   Float
  csatAverage      Float
  escalationRate   Float
  learningsSummary String?
  createdAt        DateTime @default(now())
}

model CampaignLearnings {
  id               String   @id @default(uuid())
  campaign         Campaign @relation(fields: [campaignId], references: [id])
  campaignId       String
  whatWorked       String
  whatDidNotWork   String
  bestPractices    String
  improvementAreas String
  createdAt        DateTime @default(now())
}

model InternalCampaignReport {
  id                 String   @id @default(uuid())
  campaign           Campaign @relation(fields: [campaignId], references: [id])
  campaignId         String
  reportTitle        String
  executiveSummary   String
  kpiHighlights      String
  learningHighlights String
  improvementAreas   String
  graphsReference    String? // Optional: link to dashboard or PDF graphs
  createdAt          DateTime @default(now())
}
